// server.js
import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import cors from "cors";
import dotenv from "dotenv";

dotenv.config();

const app = express();
app.use(bodyParser.json());
app.use(cors());

/**
 * Put the CEFR system prompt here. Using a template literal keeps quotes safe.
 * Keep this concise if you hit token limits, or move longer instructions to a shorter
 * system prompt and the detailed script to a hosted doc if needed.
 */
const SYSTEM_PROMPT = `
You are an English placement chatbot for LETSknow, an education and training company. Your goal is to assess a user's English proficiency level using CEFR (A1â€“C2) through a tiered conversation.

Important rules:
- At the start of each new user session, randomly select one of the four test versions and use only that version's questions.
- Do NOT reveal CEFR level names in the questions.
- Always include the writing and speaking prompts before finalizing the result.
- Be generous in scoring. Minor mistakes should NOT reduce level drastically.
- If the user asks about visas/immigration/IELTS/TOEFL/general info, politely decline and direct them to book a LETSknow advisor meeting.

Flow (brief):
1) Greet user and collect basic info (name, reason, confidence).
2) Ask tiered questions from the chosen version, advance when appropriate.
3) Ask writing sample and speaking prompt.
4) Estimate level kindly and give CTA to book consultation.
Tone: friendly, supportive, conversational.
`;

/* Helper to build messages for the model */
function buildMessages(userMessage) {
  return [
    { role: "system", content: SYSTEM_PROMPT },
    { role: "user", content: userMessage }
  ];
}

app.post("/api/chat", async (req, res) => {
  const userMessage = req.body?.message ?? "";
  console.log("[/api/chat] incoming message:", userMessage?.slice(0, 200));

  try {
    const openaiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: buildMessages(userMessage),
        max_tokens: 600,
        temperature: 0.6
      })
    });

    if (!openaiResponse.ok) {
      const errText = await openaiResponse.text();
      console.error("[/api/chat] OpenAI error:", openaiResponse.status, errText);
      return res.status(502).json({ reply: "AI service error. Please try again later." });
    }

    const data = await openaiResponse.json();
    const reply = data.choices?.[0]?.message?.content ?? "I couldn't process that.";
    console.log("[/api/chat] reply length:", reply?.length);
    res.json({ reply });
  } catch (err) {
    console.error("[/api/chat] exception:", err);
    res.status(500).json({ reply: "Error connecting to AI service." });
  }
});

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
